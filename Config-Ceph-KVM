#!/bin/bash

ifconf=/sbin/ifconfig
route=/sbin/route
brName=$4
HostName="ceph-$3"
TAP="tap$3"


# For Permission check
if [ $# != 4 ]
  then echo "$0 Image VM-IP VM-# br-name"
  exit 1
elif [ ! -d /mnt/tmp ] 
 then echo "Mount point /mnt/tmp does not exist, create it first."
 exit 2
fi


# For Scripts Creating
KvmScript="start-$HostName-$3"
StopAndRestoreLan="stop-ceph-restore-lan-$3"
DeclAutoGen="# Don't Edit, File automatically generated by Config-KVM script" 


# For Mac & Gateway Creating
client_net_info(){
    PREFIX=$(${ifconf} $brName | grep "HWaddr" |\
		    sed 's/^.*HWaddr //' | cut -d':' -f 1-3)
    F4=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
    F5=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
    F6=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
    FakeMac=$PREFIX:${F4}:${F5}:${F6}
    IFS=. read i1 i2 i3 i4 <<< "$1"
    GateWay="$i1.$i2.$i3.1"
}


client_net_info $2


# Show Information
echo "HostName: $HostName"
echo "TapName : $TAP"
echo "IP      : $2"
echo "Gateway : $GateWay"
echo "FakeMac : ${FakeMac}"
SockDir=`pwd`
echo SockDir=${SockDir} 


# For Image Mounting
Secstart=976896
Offset=`expr ${Secstart} '*' 512`
Mount=NOTREADY
sudo modprobe loop
sudo mount -o loop,offset=${Offset} $1 /mnt/tmp >/dev/null 2>&1
if [ $? -eq 0 ]
    then echo "$1 mount on /mnt/tmp"
    Mount=OK
elif [ $? -eq 1 ]
    then echo "$1 is already mounted"
else
    echo "Failed to mount"
fi


# For hosts & networking file
echo "$HostName" >hostname
echo "127.0.0.1       localhost" >hosts
echo "$2   $HostName" >>hosts
echo "" >>hosts
echo "# The following lines are desirable for IPv6 capable hosts" >>hosts
echo "::1     localhost ip6-localhost ip6-loopback" >>hosts
echo "::1 ip6-localhost ip6-loopback" >>hosts
echo "ff02::1 ip6-allnodes" >>hosts
echo "ff02::2 ip6-allrouters" >>hosts
echo "" >70-persistent-net.rules
echo "#For more information, please check /etc/rc.local" >interfaces
echo "auto lo" >>interfaces
echo "iface lo inet loopback" >>interfaces
echo "nameserver 8.8.8.8" >>resolv.conf
echo "#!/bin/sh -e" >rc.local
echo "" >>rc.local
echo "ifconfig eth0 $2 netmask 255.255.255.0" >>rc.local
echo "route add default gw $GateWay" >>rc.local
echo "" >>rc.local
echo "exit 0" >>rc.local


# For cp file to image
if [ $Mount = "OK" ]
then
sudo cp hostname /mnt/tmp/etc/hostname
sudo cp hosts /mnt/tmp/etc/hosts
sudo cp 70-persistent-net.rules /mnt/tmp/etc/udev/rules.d/70-persistent-net.rules
sudo cp interfaces /mnt/tmp/etc/network/interfaces
sudo cp resolv.conf /mnt/tmp/etc/resolv.conf
sudo cp rc.local /mnt/tmp/etc/rc.local
sudo chmod 755 /mnt/tmp/etc/rc.local
sudo umount /mnt/tmp
echo "Umount $1"
fi


# Next six files are no longer needed
rm -f hostname hosts 70-persistent-net.rules interfaces resolv.conf rc.local


# Preparing Host Network Configuration Script
echo "#!/bin/bash" >${KvmScript}
echo "" >>${KvmScript}
echo "${DeclAutoGen}" >>${KvmScript}
echo "if [ \$EUID -ne 0 ]" >>${KvmScript}
echo "   then sudo echo \"Super User passwd, please:\"" >>${KvmScript}
echo "        if [ \$? -ne 0 ]" >>${KvmScript}
echo "          then  echo \"Sorry, need su privilege!\"" >>${KvmScript}
echo "                exit 1" >>${KvmScript}
echo "        fi" >>${KvmScript}
echo "fi" >>${KvmScript}
echo "" >>${KvmScript}
echo "sudo chmod 666 /dev/net/tun" >>${KvmScript}
echo "sudo tunctl -u `whoami` -t ${TAP}" >>${KvmScript}
echo "sudo ifconfig ${TAP} 0.0.0.0 up" >>${KvmScript}
echo "sudo ./ovs-ifup $brName ${TAP}" >>${KvmScript}
echo "sudo modprobe vhost_net" >>${KvmScript}
echo "sudo chmod 666 /dev/vhost-net" >>${KvmScript}
echo "#replaceA" >>${KvmScript}
echo "" >>${KvmScript}
echo "echo \"Starting VM: $HostName..., mem=1024M\"" >>${KvmScript}
echo "" >>${KvmScript}
cp ${KvmScript} ${KvmScript}-AsDaemon
echo "kvm \\" >>${KvmScript}
echo "-smp 1 \\" >>${KvmScript}
echo "-m 1024M \\" >>${KvmScript}
echo "-netdev tap,id=${TAP},ifname=${TAP},vhost=on,script=no \\" >>${KvmScript}
echo "-net nic,model=virtio,netdev=${TAP},vlan=0,macaddr=${FakeMac} \\" >>${KvmScript}
echo "-monitor unix:${SockDir}/MonSock-$HostName,server,nowait \\" >>${KvmScript}
echo "-drive file=$1,if=virtio,index=0 \\" >>${KvmScript}
echo "& #replaceB" >>${KvmScript}
echo "screen -S $HostName -d -m \\" >>${KvmScript}-AsDaemon
echo "kvm \\" >>${KvmScript}-AsDaemon
echo "-smp 1 \\" >>${KvmScript}-AsDaemon
echo "-m 1024M \\" >>${KvmScript}-AsDaemon
echo "-netdev tap,id=${TAP},ifname=${TAP},vhost=on,script=no \\" >>${KvmScript}-AsDaemon
echo "-net nic,model=virtio,netdev=${TAP},vlan=0,macaddr=${FakeMac} \\" >>${KvmScript}-AsDaemon
echo "-monitor unix:${SockDir}/MonSock-$HostName,server,nowait \\" >>${KvmScript}-AsDaemon
echo "-curses \\" >>${KvmScript}-AsDaemon
echo "-drive file=$1,if=virtio,index=0 \\" >>${KvmScript}-AsDaemon
echo "& #replaceC" >>${KvmScript}-AsDaemon


# Preparing Restore Lan Script
echo "#!/bin/bash" >${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "${DeclAutoGen}" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "if [ \$EUID -ne 0 ]" >>${StopAndRestoreLan}
echo "    then sudo echo \"Super User passwd, please:\"" >>${StopAndRestoreLan}
echo "        if [ \$? -ne 0 ]" >>${StopAndRestoreLan}
echo "            then  echo \"Sorry, need su privilege!\"" >>${StopAndRestoreLan}
echo "                exit 1" >>${StopAndRestoreLan}
echo "        fi" >>${StopAndRestoreLan}
echo "fi" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "echo \"system_powerdown\" | socat - unix-connect:${SockDir}/MonSock-$HostName" >>${StopAndRestoreLan}
echo "echo \"Please wait 10 seconds.\"" >>${StopAndRestoreLan}
echo "sleep 10"  >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "ping -c 3 $2" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "if [ \$? -eq 0 ]"  >>${StopAndRestoreLan}
echo "    then echo \"$HostName still alive, shut it down.  Enter passwd twice!\"" >>${StopAndRestoreLan}
echo "        ssh -t ${USER}@${2} 'sudo init 0'" >>${StopAndRestoreLan}
echo "else rm -f ${SockDir}/MonSock-$HostName" >>${StopAndRestoreLan}
echo "fi" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "echo \"Restore lan...\"" >>${StopAndRestoreLan}
echo "sudo ./ovs-ifdown $brName ${TAP}" >>${StopAndRestoreLan}
echo "sudo tunctl -d ${TAP}" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}


# Setting permission of scripts
chmod 755 ${KvmScript} ${KvmScript}-AsDaemon ${StopAndRestoreLan}


# Creating OpenvSwitch up & down scripts(single quotes)
if [ ! -f ovs-ifup ]
then
    echo '#!/bin/sh' >ovs-ifup
    echo "" >>ovs-ifup
    echo "switch=\$1" >>ovs-ifup
    echo "/sbin/ifconfig \$2 0.0.0.0 up" >>ovs-ifup
    echo "ovs-vsctl add-port \${switch} \$2" >>ovs-ifup
fi
if [ ! -f ovs-ifdown ]
then
    echo '#!/bin/sh' >ovs-ifdown
    echo "" >>ovs-ifdown
    echo "switch=\$1" >>ovs-ifdown
    echo "/sbin/ifconfig \$2 0.0.0.0 down" >>ovs-ifdown
    echo "ovs-vsctl del-port \${switch} \$2" >>ovs-ifdown
fi
sudo chmod 755 ovs-ifup ovs-ifdown
